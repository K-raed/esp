[1/14] Linking C static library esp-idf/protocol_examples_common/libprotocol_examples_common.a
[2/14] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[3/14] Performing build step for 'bootloader'
[1/1] cd /home/raed/esp/ssl2+blink/build/bootloader/esp-idf/esptool_py && /home/raed/.espressif/python_env/idf5.2_py3.8_env/bin/python /home/raed/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/raed/esp/ssl2+blink/build/bootloader/bootloader.bin
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[4/12] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/simple_ota_example.c.obj
[5/12] Linking C static library esp-idf/main/libmain.a
[6/12] Generating ld/sections.ld
[7/12] Generating emqxsl-ca.crt.S
[8/12] Building ASM object CMakeFiles/mqtt_ssl.elf.dir/emqxsl-ca.crt.S.obj
[9/12] Building C object CMakeFiles/mqtt_ssl.elf.dir/project_elf_src_esp32.c.obj
[10/12] Linking CXX executable mqtt_ssl.elf
[11/12] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/raed/esp/ssl2+blink/build/mqtt_ssl.bin
[12/12] cd /home/raed/esp/ssl2+blink/build/esp-idf/esptool_py && /home/raed/.espressif/python_env/idf5.2_py3.8_env/bin/python /home/raed/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/raed/esp/ssl2+blink/build/partition_table/partition-table.bin /home/raed/esp/ssl2+blink/build/mqtt_ssl.bin
mqtt_ssl.bin binary size 0xe6160 bytes. Smallest app partition is 0x100000 bytes. 0x19ea0 bytes (10%) free.
